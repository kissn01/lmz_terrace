// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package com.yoooum.tars.account;

import com.qq.tars.protocol.util.*;
import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.*;
import com.qq.tars.protocol.tars.annotation.*;

@TarsStruct
public class TActiveBatchDb {

	@TarsStructProperty(order = 0, isRequire = false)
	public String sActiveCode = "";
	@TarsStructProperty(order = 1, isRequire = false)
	public long lUseTime = 0L;
	@TarsStructProperty(order = 2, isRequire = false)
	public String sBatch = "";

	public String getSActiveCode() {
		return sActiveCode;
	}

	public void setSActiveCode(String sActiveCode) {
		this.sActiveCode = sActiveCode;
	}

	public long getLUseTime() {
		return lUseTime;
	}

	public void setLUseTime(long lUseTime) {
		this.lUseTime = lUseTime;
	}

	public String getSBatch() {
		return sBatch;
	}

	public void setSBatch(String sBatch) {
		this.sBatch = sBatch;
	}

	public TActiveBatchDb() {
	}

	public TActiveBatchDb(String sActiveCode, long lUseTime, String sBatch) {
		this.sActiveCode = sActiveCode;
		this.lUseTime = lUseTime;
		this.sBatch = sBatch;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + TarsUtil.hashCode(sActiveCode);
		result = prime * result + TarsUtil.hashCode(lUseTime);
		result = prime * result + TarsUtil.hashCode(sBatch);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof TActiveBatchDb)) {
			return false;
		}
		TActiveBatchDb other = (TActiveBatchDb) obj;
		return (
			TarsUtil.equals(sActiveCode, other.sActiveCode) &&
			TarsUtil.equals(lUseTime, other.lUseTime) &&
			TarsUtil.equals(sBatch, other.sBatch) 
		);
	}

	public void writeTo(TarsOutputStream _os) {
		if (null != sActiveCode) {
			_os.write(sActiveCode, 0);
		}
		_os.write(lUseTime, 1);
		if (null != sBatch) {
			_os.write(sBatch, 2);
		}
	}


	public void readFrom(TarsInputStream _is) {
		this.sActiveCode = _is.readString(0, false);
		this.lUseTime = _is.read(lUseTime, 1, false);
		this.sBatch = _is.readString(2, false);
	}

}
