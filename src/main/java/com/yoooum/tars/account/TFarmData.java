// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package com.yoooum.tars.account;

import com.qq.tars.protocol.util.*;
import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.*;
import com.qq.tars.protocol.tars.annotation.*;

@TarsStruct
public class TFarmData {

	@TarsStructProperty(order = 1, isRequire = false)
	public java.util.List<TSoil> vecSoilList = null;
	@TarsStructProperty(order = 3, isRequire = false)
	public TDBPastureData stPastureData = null;

	public java.util.List<TSoil> getVecSoilList() {
		return vecSoilList;
	}

	public void setVecSoilList(java.util.List<TSoil> vecSoilList) {
		this.vecSoilList = vecSoilList;
	}

	public TDBPastureData getStPastureData() {
		return stPastureData;
	}

	public void setStPastureData(TDBPastureData stPastureData) {
		this.stPastureData = stPastureData;
	}

	public TFarmData() {
	}

	public TFarmData(java.util.List<TSoil> vecSoilList, TDBPastureData stPastureData) {
		this.vecSoilList = vecSoilList;
		this.stPastureData = stPastureData;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + TarsUtil.hashCode(vecSoilList);
		result = prime * result + TarsUtil.hashCode(stPastureData);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof TFarmData)) {
			return false;
		}
		TFarmData other = (TFarmData) obj;
		return (
			TarsUtil.equals(vecSoilList, other.vecSoilList) &&
			TarsUtil.equals(stPastureData, other.stPastureData) 
		);
	}

	public void writeTo(TarsOutputStream _os) {
		if (null != vecSoilList) {
			_os.write(vecSoilList, 1);
		}
		if (null != stPastureData) {
			_os.write(stPastureData, 3);
		}
	}

	static java.util.List<TSoil> cache_vecSoilList;
	static { 
		cache_vecSoilList = new java.util.ArrayList<TSoil>();
		TSoil var_37 = new TSoil();
		cache_vecSoilList.add(var_37);
	}
	static TDBPastureData cache_stPastureData;
	static { 
		cache_stPastureData = new TDBPastureData();
	}

	public void readFrom(TarsInputStream _is) {
		this.vecSoilList = (java.util.List<TSoil>) _is.read(cache_vecSoilList, 1, false);
		this.stPastureData = (TDBPastureData) _is.read(cache_stPastureData, 3, false);
	}

}
