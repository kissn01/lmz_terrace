// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package com.yoooum.tars.yoooum;

import com.qq.tars.protocol.util.*;
import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.*;
import com.qq.tars.protocol.tars.annotation.*;

@TarsStruct
public class TCliRoleInfo {

	@TarsStructProperty(order = 0, isRequire = false)
	public int iRoleID = 0;
	@TarsStructProperty(order = 1, isRequire = false)
	public short nLvl = (short)0;
	@TarsStructProperty(order = 2, isRequire = false)
	public java.util.List<TProperty> vecUpgradeProperty = null;

	public int getIRoleID() {
		return iRoleID;
	}

	public void setIRoleID(int iRoleID) {
		this.iRoleID = iRoleID;
	}

	public short getNLvl() {
		return nLvl;
	}

	public void setNLvl(short nLvl) {
		this.nLvl = nLvl;
	}

	public java.util.List<TProperty> getVecUpgradeProperty() {
		return vecUpgradeProperty;
	}

	public void setVecUpgradeProperty(java.util.List<TProperty> vecUpgradeProperty) {
		this.vecUpgradeProperty = vecUpgradeProperty;
	}

	public TCliRoleInfo() {
	}

	public TCliRoleInfo(int iRoleID, short nLvl, java.util.List<TProperty> vecUpgradeProperty) {
		this.iRoleID = iRoleID;
		this.nLvl = nLvl;
		this.vecUpgradeProperty = vecUpgradeProperty;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + TarsUtil.hashCode(iRoleID);
		result = prime * result + TarsUtil.hashCode(nLvl);
		result = prime * result + TarsUtil.hashCode(vecUpgradeProperty);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof TCliRoleInfo)) {
			return false;
		}
		TCliRoleInfo other = (TCliRoleInfo) obj;
		return (
			TarsUtil.equals(iRoleID, other.iRoleID) &&
			TarsUtil.equals(nLvl, other.nLvl) &&
			TarsUtil.equals(vecUpgradeProperty, other.vecUpgradeProperty) 
		);
	}

	public void writeTo(TarsOutputStream _os) {
		_os.write(iRoleID, 0);
		_os.write(nLvl, 1);
		if (null != vecUpgradeProperty) {
			_os.write(vecUpgradeProperty, 2);
		}
	}

	static java.util.List<TProperty> cache_vecUpgradeProperty;
	static { 
		cache_vecUpgradeProperty = new java.util.ArrayList<TProperty>();
		TProperty var_61 = new TProperty();
		cache_vecUpgradeProperty.add(var_61);
	}

	public void readFrom(TarsInputStream _is) {
		this.iRoleID = _is.read(iRoleID, 0, false);
		this.nLvl = _is.read(nLvl, 1, false);
		this.vecUpgradeProperty = (java.util.List<TProperty>) _is.read(cache_vecUpgradeProperty, 2, false);
	}

}
